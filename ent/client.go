// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/BiLuoHui/ganshijiumei/ent/migrate"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/menpai"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// JiangHuRen is the client for interacting with the JiangHuRen builders.
	JiangHuRen *JiangHuRenClient
	// MenPai is the client for interacting with the MenPai builders.
	MenPai *MenPaiClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.JiangHuRen = NewJiangHuRenClient(c.config)
	c.MenPai = NewMenPaiClient(c.config)
}

// Open opens a connection to the database specified by the driver name and a
// driver-specific data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:     cfg,
		JiangHuRen: NewJiangHuRenClient(cfg),
		MenPai:     NewMenPaiClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		JiangHuRen.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.JiangHuRen.Use(hooks...)
	c.MenPai.Use(hooks...)
}

// JiangHuRenClient is a client for the JiangHuRen schema.
type JiangHuRenClient struct {
	config
}

// NewJiangHuRenClient returns a client for the JiangHuRen from the given config.
func NewJiangHuRenClient(c config) *JiangHuRenClient {
	return &JiangHuRenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jianghuren.Hooks(f(g(h())))`.
func (c *JiangHuRenClient) Use(hooks ...Hook) {
	c.hooks.JiangHuRen = append(c.hooks.JiangHuRen, hooks...)
}

// Create returns a create builder for JiangHuRen.
func (c *JiangHuRenClient) Create() *JiangHuRenCreate {
	mutation := newJiangHuRenMutation(c.config, OpCreate)
	return &JiangHuRenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for JiangHuRen.
func (c *JiangHuRenClient) Update() *JiangHuRenUpdate {
	mutation := newJiangHuRenMutation(c.config, OpUpdate)
	return &JiangHuRenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JiangHuRenClient) UpdateOne(jhr *JiangHuRen) *JiangHuRenUpdateOne {
	return c.UpdateOneID(jhr.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *JiangHuRenClient) UpdateOneID(id int) *JiangHuRenUpdateOne {
	mutation := newJiangHuRenMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &JiangHuRenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JiangHuRen.
func (c *JiangHuRenClient) Delete() *JiangHuRenDelete {
	mutation := newJiangHuRenMutation(c.config, OpDelete)
	return &JiangHuRenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *JiangHuRenClient) DeleteOne(jhr *JiangHuRen) *JiangHuRenDeleteOne {
	return c.DeleteOneID(jhr.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *JiangHuRenClient) DeleteOneID(id int) *JiangHuRenDeleteOne {
	builder := c.Delete().Where(jianghuren.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JiangHuRenDeleteOne{builder}
}

// Create returns a query builder for JiangHuRen.
func (c *JiangHuRenClient) Query() *JiangHuRenQuery {
	return &JiangHuRenQuery{config: c.config}
}

// Get returns a JiangHuRen entity by its id.
func (c *JiangHuRenClient) Get(ctx context.Context, id int) (*JiangHuRen, error) {
	return c.Query().Where(jianghuren.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JiangHuRenClient) GetX(ctx context.Context, id int) *JiangHuRen {
	jhr, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return jhr
}

// Hooks returns the client hooks.
func (c *JiangHuRenClient) Hooks() []Hook {
	return c.hooks.JiangHuRen
}

// MenPaiClient is a client for the MenPai schema.
type MenPaiClient struct {
	config
}

// NewMenPaiClient returns a client for the MenPai from the given config.
func NewMenPaiClient(c config) *MenPaiClient {
	return &MenPaiClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `menpai.Hooks(f(g(h())))`.
func (c *MenPaiClient) Use(hooks ...Hook) {
	c.hooks.MenPai = append(c.hooks.MenPai, hooks...)
}

// Create returns a create builder for MenPai.
func (c *MenPaiClient) Create() *MenPaiCreate {
	mutation := newMenPaiMutation(c.config, OpCreate)
	return &MenPaiCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for MenPai.
func (c *MenPaiClient) Update() *MenPaiUpdate {
	mutation := newMenPaiMutation(c.config, OpUpdate)
	return &MenPaiUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *MenPaiClient) UpdateOne(mp *MenPai) *MenPaiUpdateOne {
	return c.UpdateOneID(mp.ID)
}

// UpdateOneID returns an update builder for the given id.
func (c *MenPaiClient) UpdateOneID(id int) *MenPaiUpdateOne {
	mutation := newMenPaiMutation(c.config, OpUpdateOne)
	mutation.id = &id
	return &MenPaiUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for MenPai.
func (c *MenPaiClient) Delete() *MenPaiDelete {
	mutation := newMenPaiMutation(c.config, OpDelete)
	return &MenPaiDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *MenPaiClient) DeleteOne(mp *MenPai) *MenPaiDeleteOne {
	return c.DeleteOneID(mp.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *MenPaiClient) DeleteOneID(id int) *MenPaiDeleteOne {
	builder := c.Delete().Where(menpai.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &MenPaiDeleteOne{builder}
}

// Create returns a query builder for MenPai.
func (c *MenPaiClient) Query() *MenPaiQuery {
	return &MenPaiQuery{config: c.config}
}

// Get returns a MenPai entity by its id.
func (c *MenPaiClient) Get(ctx context.Context, id int) (*MenPai, error) {
	return c.Query().Where(menpai.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *MenPaiClient) GetX(ctx context.Context, id int) *MenPai {
	mp, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return mp
}

// Hooks returns the client hooks.
func (c *MenPaiClient) Hooks() []Hook {
	return c.hooks.MenPai
}
