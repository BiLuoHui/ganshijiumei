// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/predicate"
	"github.com/BiLuoHui/ganshijiumei/ent/weapon"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// WeaponUpdate is the builder for updating Weapon entities.
type WeaponUpdate struct {
	config
	hooks      []Hook
	mutation   *WeaponMutation
	predicates []predicate.Weapon
}

// Where adds a new predicate for the builder.
func (wu *WeaponUpdate) Where(ps ...predicate.Weapon) *WeaponUpdate {
	wu.predicates = append(wu.predicates, ps...)
	return wu
}

// SetUpdatedAt sets the updated_at field.
func (wu *WeaponUpdate) SetUpdatedAt(t time.Time) *WeaponUpdate {
	wu.mutation.SetUpdatedAt(t)
	return wu
}

// SetName sets the name field.
func (wu *WeaponUpdate) SetName(s string) *WeaponUpdate {
	wu.mutation.SetName(s)
	return wu
}

// SetLevel sets the level field.
func (wu *WeaponUpdate) SetLevel(i int) *WeaponUpdate {
	wu.mutation.ResetLevel()
	wu.mutation.SetLevel(i)
	return wu
}

// SetNillableLevel sets the level field if the given value is not nil.
func (wu *WeaponUpdate) SetNillableLevel(i *int) *WeaponUpdate {
	if i != nil {
		wu.SetLevel(*i)
	}
	return wu
}

// AddLevel adds i to level.
func (wu *WeaponUpdate) AddLevel(i int) *WeaponUpdate {
	wu.mutation.AddLevel(i)
	return wu
}

// SetCategory sets the category field.
func (wu *WeaponUpdate) SetCategory(i int) *WeaponUpdate {
	wu.mutation.ResetCategory()
	wu.mutation.SetCategory(i)
	return wu
}

// SetNillableCategory sets the category field if the given value is not nil.
func (wu *WeaponUpdate) SetNillableCategory(i *int) *WeaponUpdate {
	if i != nil {
		wu.SetCategory(*i)
	}
	return wu
}

// AddCategory adds i to category.
func (wu *WeaponUpdate) AddCategory(i int) *WeaponUpdate {
	wu.mutation.AddCategory(i)
	return wu
}

// SetOwnerID sets the owner edge to JiangHuRen by id.
func (wu *WeaponUpdate) SetOwnerID(id int) *WeaponUpdate {
	wu.mutation.SetOwnerID(id)
	return wu
}

// SetOwner sets the owner edge to JiangHuRen.
func (wu *WeaponUpdate) SetOwner(j *JiangHuRen) *WeaponUpdate {
	return wu.SetOwnerID(j.ID)
}

// ClearOwner clears the owner edge to JiangHuRen.
func (wu *WeaponUpdate) ClearOwner() *WeaponUpdate {
	wu.mutation.ClearOwner()
	return wu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (wu *WeaponUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := wu.mutation.UpdatedAt(); !ok {
		v := weapon.UpdateDefaultUpdatedAt()
		wu.mutation.SetUpdatedAt(v)
	}

	if _, ok := wu.mutation.OwnerID(); wu.mutation.OwnerCleared() && !ok {
		return 0, errors.New("ent: clearing a unique edge \"owner\"")
	}
	var (
		err      error
		affected int
	)
	if len(wu.hooks) == 0 {
		affected, err = wu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeaponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wu.mutation = mutation
			affected, err = wu.sqlSave(ctx)
			return affected, err
		})
		for i := len(wu.hooks) - 1; i >= 0; i-- {
			mut = wu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (wu *WeaponUpdate) SaveX(ctx context.Context) int {
	affected, err := wu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wu *WeaponUpdate) Exec(ctx context.Context) error {
	_, err := wu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wu *WeaponUpdate) ExecX(ctx context.Context) {
	if err := wu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wu *WeaponUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   weapon.Table,
			Columns: weapon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: weapon.FieldID,
			},
		},
	}
	if ps := wu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weapon.FieldUpdatedAt,
		})
	}
	if value, ok := wu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weapon.FieldName,
		})
	}
	if value, ok := wu.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldLevel,
		})
	}
	if value, ok := wu.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldLevel,
		})
	}
	if value, ok := wu.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldCategory,
		})
	}
	if value, ok := wu.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldCategory,
		})
	}
	if wu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weapon.OwnerTable,
			Columns: []string{weapon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jianghuren.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weapon.OwnerTable,
			Columns: []string{weapon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jianghuren.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weapon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// WeaponUpdateOne is the builder for updating a single Weapon entity.
type WeaponUpdateOne struct {
	config
	hooks    []Hook
	mutation *WeaponMutation
}

// SetUpdatedAt sets the updated_at field.
func (wuo *WeaponUpdateOne) SetUpdatedAt(t time.Time) *WeaponUpdateOne {
	wuo.mutation.SetUpdatedAt(t)
	return wuo
}

// SetName sets the name field.
func (wuo *WeaponUpdateOne) SetName(s string) *WeaponUpdateOne {
	wuo.mutation.SetName(s)
	return wuo
}

// SetLevel sets the level field.
func (wuo *WeaponUpdateOne) SetLevel(i int) *WeaponUpdateOne {
	wuo.mutation.ResetLevel()
	wuo.mutation.SetLevel(i)
	return wuo
}

// SetNillableLevel sets the level field if the given value is not nil.
func (wuo *WeaponUpdateOne) SetNillableLevel(i *int) *WeaponUpdateOne {
	if i != nil {
		wuo.SetLevel(*i)
	}
	return wuo
}

// AddLevel adds i to level.
func (wuo *WeaponUpdateOne) AddLevel(i int) *WeaponUpdateOne {
	wuo.mutation.AddLevel(i)
	return wuo
}

// SetCategory sets the category field.
func (wuo *WeaponUpdateOne) SetCategory(i int) *WeaponUpdateOne {
	wuo.mutation.ResetCategory()
	wuo.mutation.SetCategory(i)
	return wuo
}

// SetNillableCategory sets the category field if the given value is not nil.
func (wuo *WeaponUpdateOne) SetNillableCategory(i *int) *WeaponUpdateOne {
	if i != nil {
		wuo.SetCategory(*i)
	}
	return wuo
}

// AddCategory adds i to category.
func (wuo *WeaponUpdateOne) AddCategory(i int) *WeaponUpdateOne {
	wuo.mutation.AddCategory(i)
	return wuo
}

// SetOwnerID sets the owner edge to JiangHuRen by id.
func (wuo *WeaponUpdateOne) SetOwnerID(id int) *WeaponUpdateOne {
	wuo.mutation.SetOwnerID(id)
	return wuo
}

// SetOwner sets the owner edge to JiangHuRen.
func (wuo *WeaponUpdateOne) SetOwner(j *JiangHuRen) *WeaponUpdateOne {
	return wuo.SetOwnerID(j.ID)
}

// ClearOwner clears the owner edge to JiangHuRen.
func (wuo *WeaponUpdateOne) ClearOwner() *WeaponUpdateOne {
	wuo.mutation.ClearOwner()
	return wuo
}

// Save executes the query and returns the updated entity.
func (wuo *WeaponUpdateOne) Save(ctx context.Context) (*Weapon, error) {
	if _, ok := wuo.mutation.UpdatedAt(); !ok {
		v := weapon.UpdateDefaultUpdatedAt()
		wuo.mutation.SetUpdatedAt(v)
	}

	if _, ok := wuo.mutation.OwnerID(); wuo.mutation.OwnerCleared() && !ok {
		return nil, errors.New("ent: clearing a unique edge \"owner\"")
	}
	var (
		err  error
		node *Weapon
	)
	if len(wuo.hooks) == 0 {
		node, err = wuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeaponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wuo.mutation = mutation
			node, err = wuo.sqlSave(ctx)
			return node, err
		})
		for i := len(wuo.hooks) - 1; i >= 0; i-- {
			mut = wuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (wuo *WeaponUpdateOne) SaveX(ctx context.Context) *Weapon {
	w, err := wuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return w
}

// Exec executes the query on the entity.
func (wuo *WeaponUpdateOne) Exec(ctx context.Context) error {
	_, err := wuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wuo *WeaponUpdateOne) ExecX(ctx context.Context) {
	if err := wuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wuo *WeaponUpdateOne) sqlSave(ctx context.Context) (w *Weapon, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   weapon.Table,
			Columns: weapon.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: weapon.FieldID,
			},
		},
	}
	id, ok := wuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing Weapon.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := wuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weapon.FieldUpdatedAt,
		})
	}
	if value, ok := wuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weapon.FieldName,
		})
	}
	if value, ok := wuo.mutation.Level(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldLevel,
		})
	}
	if value, ok := wuo.mutation.AddedLevel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldLevel,
		})
	}
	if value, ok := wuo.mutation.Category(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldCategory,
		})
	}
	if value, ok := wuo.mutation.AddedCategory(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldCategory,
		})
	}
	if wuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weapon.OwnerTable,
			Columns: []string{weapon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jianghuren.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weapon.OwnerTable,
			Columns: []string{weapon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jianghuren.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	w = &Weapon{config: wuo.config}
	_spec.Assign = w.assignValues
	_spec.ScanValues = w.scanValues()
	if err = sqlgraph.UpdateNode(ctx, wuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{weapon.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return w, nil
}
