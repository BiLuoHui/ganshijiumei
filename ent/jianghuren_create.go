// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// JiangHuRenCreate is the builder for creating a JiangHuRen entity.
type JiangHuRenCreate struct {
	config
	mutation *JiangHuRenMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (jhrc *JiangHuRenCreate) SetCreatedAt(t time.Time) *JiangHuRenCreate {
	jhrc.mutation.SetCreatedAt(t)
	return jhrc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (jhrc *JiangHuRenCreate) SetNillableCreatedAt(t *time.Time) *JiangHuRenCreate {
	if t != nil {
		jhrc.SetCreatedAt(*t)
	}
	return jhrc
}

// SetUpdatedAt sets the updated_at field.
func (jhrc *JiangHuRenCreate) SetUpdatedAt(t time.Time) *JiangHuRenCreate {
	jhrc.mutation.SetUpdatedAt(t)
	return jhrc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (jhrc *JiangHuRenCreate) SetNillableUpdatedAt(t *time.Time) *JiangHuRenCreate {
	if t != nil {
		jhrc.SetUpdatedAt(*t)
	}
	return jhrc
}

// SetName sets the name field.
func (jhrc *JiangHuRenCreate) SetName(s string) *JiangHuRenCreate {
	jhrc.mutation.SetName(s)
	return jhrc
}

// SetAge sets the age field.
func (jhrc *JiangHuRenCreate) SetAge(u uint) *JiangHuRenCreate {
	jhrc.mutation.SetAge(u)
	return jhrc
}

// Save creates the JiangHuRen in the database.
func (jhrc *JiangHuRenCreate) Save(ctx context.Context) (*JiangHuRen, error) {
	if _, ok := jhrc.mutation.CreatedAt(); !ok {
		v := jianghuren.DefaultCreatedAt()
		jhrc.mutation.SetCreatedAt(v)
	}
	if _, ok := jhrc.mutation.UpdatedAt(); !ok {
		v := jianghuren.DefaultUpdatedAt()
		jhrc.mutation.SetUpdatedAt(v)
	}
	if _, ok := jhrc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if _, ok := jhrc.mutation.Age(); !ok {
		return nil, errors.New("ent: missing required field \"age\"")
	}
	var (
		err  error
		node *JiangHuRen
	)
	if len(jhrc.hooks) == 0 {
		node, err = jhrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JiangHuRenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jhrc.mutation = mutation
			node, err = jhrc.sqlSave(ctx)
			return node, err
		})
		for i := len(jhrc.hooks) - 1; i >= 0; i-- {
			mut = jhrc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jhrc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (jhrc *JiangHuRenCreate) SaveX(ctx context.Context) *JiangHuRen {
	v, err := jhrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jhrc *JiangHuRenCreate) sqlSave(ctx context.Context) (*JiangHuRen, error) {
	var (
		jhr   = &JiangHuRen{config: jhrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: jianghuren.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jianghuren.FieldID,
			},
		}
	)
	if value, ok := jhrc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jianghuren.FieldCreatedAt,
		})
		jhr.CreatedAt = value
	}
	if value, ok := jhrc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jianghuren.FieldUpdatedAt,
		})
		jhr.UpdatedAt = value
	}
	if value, ok := jhrc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jianghuren.FieldName,
		})
		jhr.Name = value
	}
	if value, ok := jhrc.mutation.Age(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: jianghuren.FieldAge,
		})
		jhr.Age = value
	}
	if err := sqlgraph.CreateNode(ctx, jhrc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	jhr.ID = int(id)
	return jhr, nil
}
