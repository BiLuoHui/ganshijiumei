// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/menpai"
	"github.com/facebookincubator/ent/dialect/sql"
)

// MenPai is the model entity for the MenPai schema.
type MenPai struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Address holds the value of the "address" field.
	Address string `json:"address,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MenPai) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // name
		&sql.NullString{}, // address
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MenPai fields.
func (mp *MenPai) assignValues(values ...interface{}) error {
	if m, n := len(values), len(menpai.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	mp.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		mp.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		mp.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		mp.Name = value.String
	}
	if value, ok := values[3].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field address", values[3])
	} else if value.Valid {
		mp.Address = value.String
	}
	return nil
}

// Update returns a builder for updating this MenPai.
// Note that, you need to call MenPai.Unwrap() before calling this method, if this MenPai
// was returned from a transaction, and the transaction was committed or rolled back.
func (mp *MenPai) Update() *MenPaiUpdateOne {
	return (&MenPaiClient{config: mp.config}).UpdateOne(mp)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (mp *MenPai) Unwrap() *MenPai {
	tx, ok := mp.config.driver.(*txDriver)
	if !ok {
		panic("ent: MenPai is not a transactional entity")
	}
	mp.config.driver = tx.drv
	return mp
}

// String implements the fmt.Stringer.
func (mp *MenPai) String() string {
	var builder strings.Builder
	builder.WriteString("MenPai(")
	builder.WriteString(fmt.Sprintf("id=%v", mp.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(mp.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(mp.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(mp.Name)
	builder.WriteString(", address=")
	builder.WriteString(mp.Address)
	builder.WriteByte(')')
	return builder.String()
}

// MenPais is a parsable slice of MenPai.
type MenPais []*MenPai

func (mp MenPais) config(cfg config) {
	for _i := range mp {
		mp[_i].config = cfg
	}
}
