// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/BiLuoHui/ganshijiumei/ent/menpai"
	"github.com/BiLuoHui/ganshijiumei/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// MenPaiQuery is the builder for querying MenPai entities.
type MenPaiQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.MenPai
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (mpq *MenPaiQuery) Where(ps ...predicate.MenPai) *MenPaiQuery {
	mpq.predicates = append(mpq.predicates, ps...)
	return mpq
}

// Limit adds a limit step to the query.
func (mpq *MenPaiQuery) Limit(limit int) *MenPaiQuery {
	mpq.limit = &limit
	return mpq
}

// Offset adds an offset step to the query.
func (mpq *MenPaiQuery) Offset(offset int) *MenPaiQuery {
	mpq.offset = &offset
	return mpq
}

// Order adds an order step to the query.
func (mpq *MenPaiQuery) Order(o ...Order) *MenPaiQuery {
	mpq.order = append(mpq.order, o...)
	return mpq
}

// First returns the first MenPai entity in the query. Returns *NotFoundError when no menpai was found.
func (mpq *MenPaiQuery) First(ctx context.Context) (*MenPai, error) {
	mps, err := mpq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(mps) == 0 {
		return nil, &NotFoundError{menpai.Label}
	}
	return mps[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (mpq *MenPaiQuery) FirstX(ctx context.Context) *MenPai {
	mp, err := mpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return mp
}

// FirstID returns the first MenPai id in the query. Returns *NotFoundError when no id was found.
func (mpq *MenPaiQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mpq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{menpai.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (mpq *MenPaiQuery) FirstXID(ctx context.Context) int {
	id, err := mpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only MenPai entity in the query, returns an error if not exactly one entity was returned.
func (mpq *MenPaiQuery) Only(ctx context.Context) (*MenPai, error) {
	mps, err := mpq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(mps) {
	case 1:
		return mps[0], nil
	case 0:
		return nil, &NotFoundError{menpai.Label}
	default:
		return nil, &NotSingularError{menpai.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (mpq *MenPaiQuery) OnlyX(ctx context.Context) *MenPai {
	mp, err := mpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return mp
}

// OnlyID returns the only MenPai id in the query, returns an error if not exactly one id was returned.
func (mpq *MenPaiQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = mpq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{menpai.Label}
	default:
		err = &NotSingularError{menpai.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (mpq *MenPaiQuery) OnlyXID(ctx context.Context) int {
	id, err := mpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of MenPais.
func (mpq *MenPaiQuery) All(ctx context.Context) ([]*MenPai, error) {
	return mpq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (mpq *MenPaiQuery) AllX(ctx context.Context) []*MenPai {
	mps, err := mpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return mps
}

// IDs executes the query and returns a list of MenPai ids.
func (mpq *MenPaiQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := mpq.Select(menpai.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (mpq *MenPaiQuery) IDsX(ctx context.Context) []int {
	ids, err := mpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (mpq *MenPaiQuery) Count(ctx context.Context) (int, error) {
	return mpq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (mpq *MenPaiQuery) CountX(ctx context.Context) int {
	count, err := mpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (mpq *MenPaiQuery) Exist(ctx context.Context) (bool, error) {
	return mpq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (mpq *MenPaiQuery) ExistX(ctx context.Context) bool {
	exist, err := mpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (mpq *MenPaiQuery) Clone() *MenPaiQuery {
	return &MenPaiQuery{
		config:     mpq.config,
		limit:      mpq.limit,
		offset:     mpq.offset,
		order:      append([]Order{}, mpq.order...),
		unique:     append([]string{}, mpq.unique...),
		predicates: append([]predicate.MenPai{}, mpq.predicates...),
		// clone intermediate query.
		sql: mpq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.MenPai.Query().
//		GroupBy(menpai.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (mpq *MenPaiQuery) GroupBy(field string, fields ...string) *MenPaiGroupBy {
	group := &MenPaiGroupBy{config: mpq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = mpq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.MenPai.Query().
//		Select(menpai.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (mpq *MenPaiQuery) Select(field string, fields ...string) *MenPaiSelect {
	selector := &MenPaiSelect{config: mpq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = mpq.sqlQuery()
	return selector
}

func (mpq *MenPaiQuery) sqlAll(ctx context.Context) ([]*MenPai, error) {
	var (
		nodes = []*MenPai{}
		_spec = mpq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &MenPai{config: mpq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, mpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (mpq *MenPaiQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := mpq.querySpec()
	return sqlgraph.CountNodes(ctx, mpq.driver, _spec)
}

func (mpq *MenPaiQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := mpq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (mpq *MenPaiQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menpai.Table,
			Columns: menpai.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menpai.FieldID,
			},
		},
		From:   mpq.sql,
		Unique: true,
	}
	if ps := mpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := mpq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := mpq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := mpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (mpq *MenPaiQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(mpq.driver.Dialect())
	t1 := builder.Table(menpai.Table)
	selector := builder.Select(t1.Columns(menpai.Columns...)...).From(t1)
	if mpq.sql != nil {
		selector = mpq.sql
		selector.Select(selector.Columns(menpai.Columns...)...)
	}
	for _, p := range mpq.predicates {
		p(selector)
	}
	for _, p := range mpq.order {
		p(selector)
	}
	if offset := mpq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := mpq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// MenPaiGroupBy is the builder for group-by MenPai entities.
type MenPaiGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (mpgb *MenPaiGroupBy) Aggregate(fns ...Aggregate) *MenPaiGroupBy {
	mpgb.fns = append(mpgb.fns, fns...)
	return mpgb
}

// Scan applies the group-by query and scan the result into the given value.
func (mpgb *MenPaiGroupBy) Scan(ctx context.Context, v interface{}) error {
	return mpgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mpgb *MenPaiGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := mpgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (mpgb *MenPaiGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(mpgb.fields) > 1 {
		return nil, errors.New("ent: MenPaiGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := mpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mpgb *MenPaiGroupBy) StringsX(ctx context.Context) []string {
	v, err := mpgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (mpgb *MenPaiGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(mpgb.fields) > 1 {
		return nil, errors.New("ent: MenPaiGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := mpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mpgb *MenPaiGroupBy) IntsX(ctx context.Context) []int {
	v, err := mpgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (mpgb *MenPaiGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(mpgb.fields) > 1 {
		return nil, errors.New("ent: MenPaiGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := mpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mpgb *MenPaiGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := mpgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (mpgb *MenPaiGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(mpgb.fields) > 1 {
		return nil, errors.New("ent: MenPaiGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := mpgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mpgb *MenPaiGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := mpgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mpgb *MenPaiGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mpgb.sqlQuery().Query()
	if err := mpgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mpgb *MenPaiGroupBy) sqlQuery() *sql.Selector {
	selector := mpgb.sql
	columns := make([]string, 0, len(mpgb.fields)+len(mpgb.fns))
	columns = append(columns, mpgb.fields...)
	for _, fn := range mpgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(mpgb.fields...)
}

// MenPaiSelect is the builder for select fields of MenPai entities.
type MenPaiSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (mps *MenPaiSelect) Scan(ctx context.Context, v interface{}) error {
	return mps.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (mps *MenPaiSelect) ScanX(ctx context.Context, v interface{}) {
	if err := mps.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (mps *MenPaiSelect) Strings(ctx context.Context) ([]string, error) {
	if len(mps.fields) > 1 {
		return nil, errors.New("ent: MenPaiSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := mps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (mps *MenPaiSelect) StringsX(ctx context.Context) []string {
	v, err := mps.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (mps *MenPaiSelect) Ints(ctx context.Context) ([]int, error) {
	if len(mps.fields) > 1 {
		return nil, errors.New("ent: MenPaiSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := mps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (mps *MenPaiSelect) IntsX(ctx context.Context) []int {
	v, err := mps.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (mps *MenPaiSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(mps.fields) > 1 {
		return nil, errors.New("ent: MenPaiSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := mps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (mps *MenPaiSelect) Float64sX(ctx context.Context) []float64 {
	v, err := mps.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (mps *MenPaiSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(mps.fields) > 1 {
		return nil, errors.New("ent: MenPaiSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := mps.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (mps *MenPaiSelect) BoolsX(ctx context.Context) []bool {
	v, err := mps.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (mps *MenPaiSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := mps.sqlQuery().Query()
	if err := mps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (mps *MenPaiSelect) sqlQuery() sql.Querier {
	selector := mps.sql
	selector.Select(selector.Columns(mps.fields...)...)
	return selector
}
