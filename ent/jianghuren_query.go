// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// JiangHuRenQuery is the builder for querying JiangHuRen entities.
type JiangHuRenQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.JiangHuRen
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (jhrq *JiangHuRenQuery) Where(ps ...predicate.JiangHuRen) *JiangHuRenQuery {
	jhrq.predicates = append(jhrq.predicates, ps...)
	return jhrq
}

// Limit adds a limit step to the query.
func (jhrq *JiangHuRenQuery) Limit(limit int) *JiangHuRenQuery {
	jhrq.limit = &limit
	return jhrq
}

// Offset adds an offset step to the query.
func (jhrq *JiangHuRenQuery) Offset(offset int) *JiangHuRenQuery {
	jhrq.offset = &offset
	return jhrq
}

// Order adds an order step to the query.
func (jhrq *JiangHuRenQuery) Order(o ...Order) *JiangHuRenQuery {
	jhrq.order = append(jhrq.order, o...)
	return jhrq
}

// First returns the first JiangHuRen entity in the query. Returns *NotFoundError when no jianghuren was found.
func (jhrq *JiangHuRenQuery) First(ctx context.Context) (*JiangHuRen, error) {
	jhrs, err := jhrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(jhrs) == 0 {
		return nil, &NotFoundError{jianghuren.Label}
	}
	return jhrs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) FirstX(ctx context.Context) *JiangHuRen {
	jhr, err := jhrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return jhr
}

// FirstID returns the first JiangHuRen id in the query. Returns *NotFoundError when no id was found.
func (jhrq *JiangHuRenQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jhrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{jianghuren.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) FirstXID(ctx context.Context) int {
	id, err := jhrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only JiangHuRen entity in the query, returns an error if not exactly one entity was returned.
func (jhrq *JiangHuRenQuery) Only(ctx context.Context) (*JiangHuRen, error) {
	jhrs, err := jhrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(jhrs) {
	case 1:
		return jhrs[0], nil
	case 0:
		return nil, &NotFoundError{jianghuren.Label}
	default:
		return nil, &NotSingularError{jianghuren.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) OnlyX(ctx context.Context) *JiangHuRen {
	jhr, err := jhrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return jhr
}

// OnlyID returns the only JiangHuRen id in the query, returns an error if not exactly one id was returned.
func (jhrq *JiangHuRenQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = jhrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{jianghuren.Label}
	default:
		err = &NotSingularError{jianghuren.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) OnlyXID(ctx context.Context) int {
	id, err := jhrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of JiangHuRens.
func (jhrq *JiangHuRenQuery) All(ctx context.Context) ([]*JiangHuRen, error) {
	return jhrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) AllX(ctx context.Context) []*JiangHuRen {
	jhrs, err := jhrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return jhrs
}

// IDs executes the query and returns a list of JiangHuRen ids.
func (jhrq *JiangHuRenQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := jhrq.Select(jianghuren.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) IDsX(ctx context.Context) []int {
	ids, err := jhrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (jhrq *JiangHuRenQuery) Count(ctx context.Context) (int, error) {
	return jhrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) CountX(ctx context.Context) int {
	count, err := jhrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (jhrq *JiangHuRenQuery) Exist(ctx context.Context) (bool, error) {
	return jhrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (jhrq *JiangHuRenQuery) ExistX(ctx context.Context) bool {
	exist, err := jhrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (jhrq *JiangHuRenQuery) Clone() *JiangHuRenQuery {
	return &JiangHuRenQuery{
		config:     jhrq.config,
		limit:      jhrq.limit,
		offset:     jhrq.offset,
		order:      append([]Order{}, jhrq.order...),
		unique:     append([]string{}, jhrq.unique...),
		predicates: append([]predicate.JiangHuRen{}, jhrq.predicates...),
		// clone intermediate query.
		sql: jhrq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.JiangHuRen.Query().
//		GroupBy(jianghuren.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (jhrq *JiangHuRenQuery) GroupBy(field string, fields ...string) *JiangHuRenGroupBy {
	group := &JiangHuRenGroupBy{config: jhrq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = jhrq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.JiangHuRen.Query().
//		Select(jianghuren.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (jhrq *JiangHuRenQuery) Select(field string, fields ...string) *JiangHuRenSelect {
	selector := &JiangHuRenSelect{config: jhrq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = jhrq.sqlQuery()
	return selector
}

func (jhrq *JiangHuRenQuery) sqlAll(ctx context.Context) ([]*JiangHuRen, error) {
	var (
		nodes = []*JiangHuRen{}
		_spec = jhrq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &JiangHuRen{config: jhrq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, jhrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (jhrq *JiangHuRenQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := jhrq.querySpec()
	return sqlgraph.CountNodes(ctx, jhrq.driver, _spec)
}

func (jhrq *JiangHuRenQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := jhrq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (jhrq *JiangHuRenQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jianghuren.Table,
			Columns: jianghuren.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jianghuren.FieldID,
			},
		},
		From:   jhrq.sql,
		Unique: true,
	}
	if ps := jhrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := jhrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := jhrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := jhrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (jhrq *JiangHuRenQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(jhrq.driver.Dialect())
	t1 := builder.Table(jianghuren.Table)
	selector := builder.Select(t1.Columns(jianghuren.Columns...)...).From(t1)
	if jhrq.sql != nil {
		selector = jhrq.sql
		selector.Select(selector.Columns(jianghuren.Columns...)...)
	}
	for _, p := range jhrq.predicates {
		p(selector)
	}
	for _, p := range jhrq.order {
		p(selector)
	}
	if offset := jhrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := jhrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// JiangHuRenGroupBy is the builder for group-by JiangHuRen entities.
type JiangHuRenGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (jhrgb *JiangHuRenGroupBy) Aggregate(fns ...Aggregate) *JiangHuRenGroupBy {
	jhrgb.fns = append(jhrgb.fns, fns...)
	return jhrgb
}

// Scan applies the group-by query and scan the result into the given value.
func (jhrgb *JiangHuRenGroupBy) Scan(ctx context.Context, v interface{}) error {
	return jhrgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jhrgb *JiangHuRenGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := jhrgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (jhrgb *JiangHuRenGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(jhrgb.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := jhrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jhrgb *JiangHuRenGroupBy) StringsX(ctx context.Context) []string {
	v, err := jhrgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (jhrgb *JiangHuRenGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(jhrgb.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := jhrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jhrgb *JiangHuRenGroupBy) IntsX(ctx context.Context) []int {
	v, err := jhrgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (jhrgb *JiangHuRenGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(jhrgb.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := jhrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jhrgb *JiangHuRenGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := jhrgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (jhrgb *JiangHuRenGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(jhrgb.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := jhrgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jhrgb *JiangHuRenGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := jhrgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jhrgb *JiangHuRenGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := jhrgb.sqlQuery().Query()
	if err := jhrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (jhrgb *JiangHuRenGroupBy) sqlQuery() *sql.Selector {
	selector := jhrgb.sql
	columns := make([]string, 0, len(jhrgb.fields)+len(jhrgb.fns))
	columns = append(columns, jhrgb.fields...)
	for _, fn := range jhrgb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(jhrgb.fields...)
}

// JiangHuRenSelect is the builder for select fields of JiangHuRen entities.
type JiangHuRenSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (jhrs *JiangHuRenSelect) Scan(ctx context.Context, v interface{}) error {
	return jhrs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (jhrs *JiangHuRenSelect) ScanX(ctx context.Context, v interface{}) {
	if err := jhrs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (jhrs *JiangHuRenSelect) Strings(ctx context.Context) ([]string, error) {
	if len(jhrs.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := jhrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (jhrs *JiangHuRenSelect) StringsX(ctx context.Context) []string {
	v, err := jhrs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (jhrs *JiangHuRenSelect) Ints(ctx context.Context) ([]int, error) {
	if len(jhrs.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := jhrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (jhrs *JiangHuRenSelect) IntsX(ctx context.Context) []int {
	v, err := jhrs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (jhrs *JiangHuRenSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(jhrs.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := jhrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (jhrs *JiangHuRenSelect) Float64sX(ctx context.Context) []float64 {
	v, err := jhrs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (jhrs *JiangHuRenSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(jhrs.fields) > 1 {
		return nil, errors.New("ent: JiangHuRenSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := jhrs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (jhrs *JiangHuRenSelect) BoolsX(ctx context.Context) []bool {
	v, err := jhrs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (jhrs *JiangHuRenSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := jhrs.sqlQuery().Query()
	if err := jhrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (jhrs *JiangHuRenSelect) sqlQuery() sql.Querier {
	selector := jhrs.sql
	selector.Select(selector.Columns(jhrs.fields...)...)
	return selector
}
