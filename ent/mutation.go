// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/menpai"

	"github.com/facebookincubator/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeJiangHuRen = "JiangHuRen"
	TypeMenPai     = "MenPai"
)

// JiangHuRenMutation represents an operation that mutate the JiangHuRens
// nodes in the graph.
type JiangHuRenMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	age           *uint
	addage        *uint
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*JiangHuRenMutation)(nil)

// newJiangHuRenMutation creates new mutation for $n.Name.
func newJiangHuRenMutation(c config, op Op) *JiangHuRenMutation {
	return &JiangHuRenMutation{
		config:        c,
		op:            op,
		typ:           TypeJiangHuRen,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m JiangHuRenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m JiangHuRenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *JiangHuRenMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *JiangHuRenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *JiangHuRenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *JiangHuRenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *JiangHuRenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *JiangHuRenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *JiangHuRenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the name field.
func (m *JiangHuRenMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *JiangHuRenMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ResetName reset all changes of the name field.
func (m *JiangHuRenMutation) ResetName() {
	m.name = nil
}

// SetAge sets the age field.
func (m *JiangHuRenMutation) SetAge(u uint) {
	m.age = &u
	m.addage = nil
}

// Age returns the age value in the mutation.
func (m *JiangHuRenMutation) Age() (r uint, exists bool) {
	v := m.age
	if v == nil {
		return
	}
	return *v, true
}

// AddAge adds u to age.
func (m *JiangHuRenMutation) AddAge(u uint) {
	if m.addage != nil {
		*m.addage += u
	} else {
		m.addage = &u
	}
}

// AddedAge returns the value that was added to the age field in this mutation.
func (m *JiangHuRenMutation) AddedAge() (r uint, exists bool) {
	v := m.addage
	if v == nil {
		return
	}
	return *v, true
}

// ResetAge reset all changes of the age field.
func (m *JiangHuRenMutation) ResetAge() {
	m.age = nil
	m.addage = nil
}

// Op returns the operation name.
func (m *JiangHuRenMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (JiangHuRen).
func (m *JiangHuRenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *JiangHuRenMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, jianghuren.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, jianghuren.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, jianghuren.FieldName)
	}
	if m.age != nil {
		fields = append(fields, jianghuren.FieldAge)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *JiangHuRenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case jianghuren.FieldCreatedAt:
		return m.CreatedAt()
	case jianghuren.FieldUpdatedAt:
		return m.UpdatedAt()
	case jianghuren.FieldName:
		return m.Name()
	case jianghuren.FieldAge:
		return m.Age()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JiangHuRenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case jianghuren.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case jianghuren.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case jianghuren.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case jianghuren.FieldAge:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAge(v)
		return nil
	}
	return fmt.Errorf("unknown JiangHuRen field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *JiangHuRenMutation) AddedFields() []string {
	var fields []string
	if m.addage != nil {
		fields = append(fields, jianghuren.FieldAge)
	}
	return fields
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *JiangHuRenMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case jianghuren.FieldAge:
		return m.AddedAge()
	}
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *JiangHuRenMutation) AddField(name string, value ent.Value) error {
	switch name {
	case jianghuren.FieldAge:
		v, ok := value.(uint)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAge(v)
		return nil
	}
	return fmt.Errorf("unknown JiangHuRen numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *JiangHuRenMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *JiangHuRenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *JiangHuRenMutation) ClearField(name string) error {
	return fmt.Errorf("unknown JiangHuRen nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *JiangHuRenMutation) ResetField(name string) error {
	switch name {
	case jianghuren.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case jianghuren.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case jianghuren.FieldName:
		m.ResetName()
		return nil
	case jianghuren.FieldAge:
		m.ResetAge()
		return nil
	}
	return fmt.Errorf("unknown JiangHuRen field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *JiangHuRenMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *JiangHuRenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *JiangHuRenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *JiangHuRenMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *JiangHuRenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *JiangHuRenMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *JiangHuRenMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown JiangHuRen unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *JiangHuRenMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown JiangHuRen edge %s", name)
}

// MenPaiMutation represents an operation that mutate the MenPais
// nodes in the graph.
type MenPaiMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	name          *string
	address       *string
	clearedFields map[string]struct{}
}

var _ ent.Mutation = (*MenPaiMutation)(nil)

// newMenPaiMutation creates new mutation for $n.Name.
func newMenPaiMutation(c config, op Op) *MenPaiMutation {
	return &MenPaiMutation{
		config:        c,
		op:            op,
		typ:           TypeMenPai,
		clearedFields: make(map[string]struct{}),
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m MenPaiMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m MenPaiMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the id value in the mutation. Note that, the id
// is available only if it was provided to the builder.
func (m *MenPaiMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the created_at field.
func (m *MenPaiMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the created_at value in the mutation.
func (m *MenPaiMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetCreatedAt reset all changes of the created_at field.
func (m *MenPaiMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the updated_at field.
func (m *MenPaiMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the updated_at value in the mutation.
func (m *MenPaiMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// ResetUpdatedAt reset all changes of the updated_at field.
func (m *MenPaiMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetName sets the name field.
func (m *MenPaiMutation) SetName(s string) {
	m.name = &s
}

// Name returns the name value in the mutation.
func (m *MenPaiMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// ResetName reset all changes of the name field.
func (m *MenPaiMutation) ResetName() {
	m.name = nil
}

// SetAddress sets the address field.
func (m *MenPaiMutation) SetAddress(s string) {
	m.address = &s
}

// Address returns the address value in the mutation.
func (m *MenPaiMutation) Address() (r string, exists bool) {
	v := m.address
	if v == nil {
		return
	}
	return *v, true
}

// ResetAddress reset all changes of the address field.
func (m *MenPaiMutation) ResetAddress() {
	m.address = nil
}

// Op returns the operation name.
func (m *MenPaiMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (MenPai).
func (m *MenPaiMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during
// this mutation. Note that, in order to get all numeric
// fields that were in/decremented, call AddedFields().
func (m *MenPaiMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.created_at != nil {
		fields = append(fields, menpai.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, menpai.FieldUpdatedAt)
	}
	if m.name != nil {
		fields = append(fields, menpai.FieldName)
	}
	if m.address != nil {
		fields = append(fields, menpai.FieldAddress)
	}
	return fields
}

// Field returns the value of a field with the given name.
// The second boolean value indicates that this field was
// not set, or was not define in the schema.
func (m *MenPaiMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case menpai.FieldCreatedAt:
		return m.CreatedAt()
	case menpai.FieldUpdatedAt:
		return m.UpdatedAt()
	case menpai.FieldName:
		return m.Name()
	case menpai.FieldAddress:
		return m.Address()
	}
	return nil, false
}

// SetField sets the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MenPaiMutation) SetField(name string, value ent.Value) error {
	switch name {
	case menpai.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case menpai.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case menpai.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case menpai.FieldAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAddress(v)
		return nil
	}
	return fmt.Errorf("unknown MenPai field %s", name)
}

// AddedFields returns all numeric fields that were incremented
// or decremented during this mutation.
func (m *MenPaiMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was in/decremented
// from a field with the given name. The second value indicates
// that this field was not set, or was not define in the schema.
func (m *MenPaiMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value for the given name. It returns an
// error if the field is not defined in the schema, or if the
// type mismatch the field type.
func (m *MenPaiMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown MenPai numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared
// during this mutation.
func (m *MenPaiMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicates if this field was
// cleared in this mutation.
func (m *MenPaiMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value for the given name. It returns an
// error if the field is not defined in the schema.
func (m *MenPaiMutation) ClearField(name string) error {
	return fmt.Errorf("unknown MenPai nullable field %s", name)
}

// ResetField resets all changes in the mutation regarding the
// given field name. It returns an error if the field is not
// defined in the schema.
func (m *MenPaiMutation) ResetField(name string) error {
	switch name {
	case menpai.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case menpai.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case menpai.FieldName:
		m.ResetName()
		return nil
	case menpai.FieldAddress:
		m.ResetAddress()
		return nil
	}
	return fmt.Errorf("unknown MenPai field %s", name)
}

// AddedEdges returns all edge names that were set/added in this
// mutation.
func (m *MenPaiMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all ids (to other nodes) that were added for
// the given edge name.
func (m *MenPaiMutation) AddedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this
// mutation.
func (m *MenPaiMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all ids (to other nodes) that were removed for
// the given edge name.
func (m *MenPaiMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this
// mutation.
func (m *MenPaiMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean indicates if this edge was
// cleared in this mutation.
func (m *MenPaiMutation) EdgeCleared(name string) bool {
	switch name {
	}
	return false
}

// ClearEdge clears the value for the given name. It returns an
// error if the edge name is not defined in the schema.
func (m *MenPaiMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown MenPai unique edge %s", name)
}

// ResetEdge resets all changes in the mutation regarding the
// given edge name. It returns an error if the edge is not
// defined in the schema.
func (m *MenPaiMutation) ResetEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown MenPai edge %s", name)
}
