// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// JiangHuRenUpdate is the builder for updating JiangHuRen entities.
type JiangHuRenUpdate struct {
	config
	hooks      []Hook
	mutation   *JiangHuRenMutation
	predicates []predicate.JiangHuRen
}

// Where adds a new predicate for the builder.
func (jhru *JiangHuRenUpdate) Where(ps ...predicate.JiangHuRen) *JiangHuRenUpdate {
	jhru.predicates = append(jhru.predicates, ps...)
	return jhru
}

// SetUpdatedAt sets the updated_at field.
func (jhru *JiangHuRenUpdate) SetUpdatedAt(t time.Time) *JiangHuRenUpdate {
	jhru.mutation.SetUpdatedAt(t)
	return jhru
}

// SetName sets the name field.
func (jhru *JiangHuRenUpdate) SetName(s string) *JiangHuRenUpdate {
	jhru.mutation.SetName(s)
	return jhru
}

// SetAge sets the age field.
func (jhru *JiangHuRenUpdate) SetAge(u uint) *JiangHuRenUpdate {
	jhru.mutation.ResetAge()
	jhru.mutation.SetAge(u)
	return jhru
}

// AddAge adds u to age.
func (jhru *JiangHuRenUpdate) AddAge(u uint) *JiangHuRenUpdate {
	jhru.mutation.AddAge(u)
	return jhru
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (jhru *JiangHuRenUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := jhru.mutation.UpdatedAt(); !ok {
		v := jianghuren.UpdateDefaultUpdatedAt()
		jhru.mutation.SetUpdatedAt(v)
	}
	var (
		err      error
		affected int
	)
	if len(jhru.hooks) == 0 {
		affected, err = jhru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JiangHuRenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jhru.mutation = mutation
			affected, err = jhru.sqlSave(ctx)
			return affected, err
		})
		for i := len(jhru.hooks) - 1; i >= 0; i-- {
			mut = jhru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jhru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (jhru *JiangHuRenUpdate) SaveX(ctx context.Context) int {
	affected, err := jhru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jhru *JiangHuRenUpdate) Exec(ctx context.Context) error {
	_, err := jhru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhru *JiangHuRenUpdate) ExecX(ctx context.Context) {
	if err := jhru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jhru *JiangHuRenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jianghuren.Table,
			Columns: jianghuren.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jianghuren.FieldID,
			},
		},
	}
	if ps := jhru.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jhru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jianghuren.FieldUpdatedAt,
		})
	}
	if value, ok := jhru.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jianghuren.FieldName,
		})
	}
	if value, ok := jhru.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: jianghuren.FieldAge,
		})
	}
	if value, ok := jhru.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: jianghuren.FieldAge,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jhru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jianghuren.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// JiangHuRenUpdateOne is the builder for updating a single JiangHuRen entity.
type JiangHuRenUpdateOne struct {
	config
	hooks    []Hook
	mutation *JiangHuRenMutation
}

// SetUpdatedAt sets the updated_at field.
func (jhruo *JiangHuRenUpdateOne) SetUpdatedAt(t time.Time) *JiangHuRenUpdateOne {
	jhruo.mutation.SetUpdatedAt(t)
	return jhruo
}

// SetName sets the name field.
func (jhruo *JiangHuRenUpdateOne) SetName(s string) *JiangHuRenUpdateOne {
	jhruo.mutation.SetName(s)
	return jhruo
}

// SetAge sets the age field.
func (jhruo *JiangHuRenUpdateOne) SetAge(u uint) *JiangHuRenUpdateOne {
	jhruo.mutation.ResetAge()
	jhruo.mutation.SetAge(u)
	return jhruo
}

// AddAge adds u to age.
func (jhruo *JiangHuRenUpdateOne) AddAge(u uint) *JiangHuRenUpdateOne {
	jhruo.mutation.AddAge(u)
	return jhruo
}

// Save executes the query and returns the updated entity.
func (jhruo *JiangHuRenUpdateOne) Save(ctx context.Context) (*JiangHuRen, error) {
	if _, ok := jhruo.mutation.UpdatedAt(); !ok {
		v := jianghuren.UpdateDefaultUpdatedAt()
		jhruo.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *JiangHuRen
	)
	if len(jhruo.hooks) == 0 {
		node, err = jhruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*JiangHuRenMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			jhruo.mutation = mutation
			node, err = jhruo.sqlSave(ctx)
			return node, err
		})
		for i := len(jhruo.hooks) - 1; i >= 0; i-- {
			mut = jhruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, jhruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (jhruo *JiangHuRenUpdateOne) SaveX(ctx context.Context) *JiangHuRen {
	jhr, err := jhruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return jhr
}

// Exec executes the query on the entity.
func (jhruo *JiangHuRenUpdateOne) Exec(ctx context.Context) error {
	_, err := jhruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhruo *JiangHuRenUpdateOne) ExecX(ctx context.Context) {
	if err := jhruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jhruo *JiangHuRenUpdateOne) sqlSave(ctx context.Context) (jhr *JiangHuRen, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   jianghuren.Table,
			Columns: jianghuren.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: jianghuren.FieldID,
			},
		},
	}
	id, ok := jhruo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing JiangHuRen.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := jhruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: jianghuren.FieldUpdatedAt,
		})
	}
	if value, ok := jhruo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: jianghuren.FieldName,
		})
	}
	if value, ok := jhruo.mutation.Age(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: jianghuren.FieldAge,
		})
	}
	if value, ok := jhruo.mutation.AddedAge(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint,
			Value:  value,
			Column: jianghuren.FieldAge,
		})
	}
	jhr = &JiangHuRen{config: jhruo.config}
	_spec.Assign = jhr.assignValues
	_spec.ScanValues = jhr.scanValues()
	if err = sqlgraph.UpdateNode(ctx, jhruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jianghuren.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return jhr, nil
}
