// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/weapon"
	"github.com/facebookincubator/ent/dialect/sql"
)

// Weapon is the model entity for the Weapon schema.
type Weapon struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Level holds the value of the "level" field.
	Level int `json:"level,omitempty"`
	// Category holds the value of the "category" field.
	Category int `json:"category,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WeaponQuery when eager-loading is set.
	Edges               WeaponEdges `json:"edges"`
	jiang_hu_ren_weapon *int
}

// WeaponEdges holds the relations/edges for other nodes in the graph.
type WeaponEdges struct {
	// Owner holds the value of the owner edge.
	Owner *JiangHuRen
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WeaponEdges) OwnerOrErr() (*JiangHuRen, error) {
	if e.loadedTypes[0] {
		if e.Owner == nil {
			// The edge owner was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: jianghuren.Label}
		}
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Weapon) scanValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{},  // id
		&sql.NullTime{},   // created_at
		&sql.NullTime{},   // updated_at
		&sql.NullString{}, // name
		&sql.NullInt64{},  // level
		&sql.NullInt64{},  // category
	}
}

// fkValues returns the types for scanning foreign-keys values from sql.Rows.
func (*Weapon) fkValues() []interface{} {
	return []interface{}{
		&sql.NullInt64{}, // jiang_hu_ren_weapon
	}
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Weapon fields.
func (w *Weapon) assignValues(values ...interface{}) error {
	if m, n := len(values), len(weapon.Columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	value, ok := values[0].(*sql.NullInt64)
	if !ok {
		return fmt.Errorf("unexpected type %T for field id", value)
	}
	w.ID = int(value.Int64)
	values = values[1:]
	if value, ok := values[0].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field created_at", values[0])
	} else if value.Valid {
		w.CreatedAt = value.Time
	}
	if value, ok := values[1].(*sql.NullTime); !ok {
		return fmt.Errorf("unexpected type %T for field updated_at", values[1])
	} else if value.Valid {
		w.UpdatedAt = value.Time
	}
	if value, ok := values[2].(*sql.NullString); !ok {
		return fmt.Errorf("unexpected type %T for field name", values[2])
	} else if value.Valid {
		w.Name = value.String
	}
	if value, ok := values[3].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field level", values[3])
	} else if value.Valid {
		w.Level = int(value.Int64)
	}
	if value, ok := values[4].(*sql.NullInt64); !ok {
		return fmt.Errorf("unexpected type %T for field category", values[4])
	} else if value.Valid {
		w.Category = int(value.Int64)
	}
	values = values[5:]
	if len(values) == len(weapon.ForeignKeys) {
		if value, ok := values[0].(*sql.NullInt64); !ok {
			return fmt.Errorf("unexpected type %T for edge-field jiang_hu_ren_weapon", value)
		} else if value.Valid {
			w.jiang_hu_ren_weapon = new(int)
			*w.jiang_hu_ren_weapon = int(value.Int64)
		}
	}
	return nil
}

// QueryOwner queries the owner edge of the Weapon.
func (w *Weapon) QueryOwner() *JiangHuRenQuery {
	return (&WeaponClient{config: w.config}).QueryOwner(w)
}

// Update returns a builder for updating this Weapon.
// Note that, you need to call Weapon.Unwrap() before calling this method, if this Weapon
// was returned from a transaction, and the transaction was committed or rolled back.
func (w *Weapon) Update() *WeaponUpdateOne {
	return (&WeaponClient{config: w.config}).UpdateOne(w)
}

// Unwrap unwraps the entity that was returned from a transaction after it was closed,
// so that all next queries will be executed through the driver which created the transaction.
func (w *Weapon) Unwrap() *Weapon {
	tx, ok := w.config.driver.(*txDriver)
	if !ok {
		panic("ent: Weapon is not a transactional entity")
	}
	w.config.driver = tx.drv
	return w
}

// String implements the fmt.Stringer.
func (w *Weapon) String() string {
	var builder strings.Builder
	builder.WriteString("Weapon(")
	builder.WriteString(fmt.Sprintf("id=%v", w.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(w.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(w.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", name=")
	builder.WriteString(w.Name)
	builder.WriteString(", level=")
	builder.WriteString(fmt.Sprintf("%v", w.Level))
	builder.WriteString(", category=")
	builder.WriteString(fmt.Sprintf("%v", w.Category))
	builder.WriteByte(')')
	return builder.String()
}

// Weapons is a parsable slice of Weapon.
type Weapons []*Weapon

func (w Weapons) config(cfg config) {
	for _i := range w {
		w[_i].config = cfg
	}
}
