// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"github.com/BiLuoHui/ganshijiumei/ent/predicate"
	"github.com/BiLuoHui/ganshijiumei/ent/wugong"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// WuGongQuery is the builder for querying WuGong entities.
type WuGongQuery struct {
	config
	limit      *int
	offset     *int
	order      []Order
	unique     []string
	predicates []predicate.WuGong
	// intermediate query.
	sql *sql.Selector
}

// Where adds a new predicate for the builder.
func (wgq *WuGongQuery) Where(ps ...predicate.WuGong) *WuGongQuery {
	wgq.predicates = append(wgq.predicates, ps...)
	return wgq
}

// Limit adds a limit step to the query.
func (wgq *WuGongQuery) Limit(limit int) *WuGongQuery {
	wgq.limit = &limit
	return wgq
}

// Offset adds an offset step to the query.
func (wgq *WuGongQuery) Offset(offset int) *WuGongQuery {
	wgq.offset = &offset
	return wgq
}

// Order adds an order step to the query.
func (wgq *WuGongQuery) Order(o ...Order) *WuGongQuery {
	wgq.order = append(wgq.order, o...)
	return wgq
}

// First returns the first WuGong entity in the query. Returns *NotFoundError when no wugong was found.
func (wgq *WuGongQuery) First(ctx context.Context) (*WuGong, error) {
	wgs, err := wgq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(wgs) == 0 {
		return nil, &NotFoundError{wugong.Label}
	}
	return wgs[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wgq *WuGongQuery) FirstX(ctx context.Context) *WuGong {
	wg, err := wgq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return wg
}

// FirstID returns the first WuGong id in the query. Returns *NotFoundError when no id was found.
func (wgq *WuGongQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wgq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{wugong.Label}
		return
	}
	return ids[0], nil
}

// FirstXID is like FirstID, but panics if an error occurs.
func (wgq *WuGongQuery) FirstXID(ctx context.Context) int {
	id, err := wgq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns the only WuGong entity in the query, returns an error if not exactly one entity was returned.
func (wgq *WuGongQuery) Only(ctx context.Context) (*WuGong, error) {
	wgs, err := wgq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(wgs) {
	case 1:
		return wgs[0], nil
	case 0:
		return nil, &NotFoundError{wugong.Label}
	default:
		return nil, &NotSingularError{wugong.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wgq *WuGongQuery) OnlyX(ctx context.Context) *WuGong {
	wg, err := wgq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return wg
}

// OnlyID returns the only WuGong id in the query, returns an error if not exactly one id was returned.
func (wgq *WuGongQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wgq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{wugong.Label}
	default:
		err = &NotSingularError{wugong.Label}
	}
	return
}

// OnlyXID is like OnlyID, but panics if an error occurs.
func (wgq *WuGongQuery) OnlyXID(ctx context.Context) int {
	id, err := wgq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WuGongs.
func (wgq *WuGongQuery) All(ctx context.Context) ([]*WuGong, error) {
	return wgq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (wgq *WuGongQuery) AllX(ctx context.Context) []*WuGong {
	wgs, err := wgq.All(ctx)
	if err != nil {
		panic(err)
	}
	return wgs
}

// IDs executes the query and returns a list of WuGong ids.
func (wgq *WuGongQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := wgq.Select(wugong.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wgq *WuGongQuery) IDsX(ctx context.Context) []int {
	ids, err := wgq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wgq *WuGongQuery) Count(ctx context.Context) (int, error) {
	return wgq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (wgq *WuGongQuery) CountX(ctx context.Context) int {
	count, err := wgq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wgq *WuGongQuery) Exist(ctx context.Context) (bool, error) {
	return wgq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (wgq *WuGongQuery) ExistX(ctx context.Context) bool {
	exist, err := wgq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the query builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wgq *WuGongQuery) Clone() *WuGongQuery {
	return &WuGongQuery{
		config:     wgq.config,
		limit:      wgq.limit,
		offset:     wgq.offset,
		order:      append([]Order{}, wgq.order...),
		unique:     append([]string{}, wgq.unique...),
		predicates: append([]predicate.WuGong{}, wgq.predicates...),
		// clone intermediate query.
		sql: wgq.sql.Clone(),
	}
}

// GroupBy used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WuGong.Query().
//		GroupBy(wugong.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (wgq *WuGongQuery) GroupBy(field string, fields ...string) *WuGongGroupBy {
	group := &WuGongGroupBy{config: wgq.config}
	group.fields = append([]string{field}, fields...)
	group.sql = wgq.sqlQuery()
	return group
}

// Select one or more fields from the given query.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.WuGong.Query().
//		Select(wugong.FieldCreatedAt).
//		Scan(ctx, &v)
//
func (wgq *WuGongQuery) Select(field string, fields ...string) *WuGongSelect {
	selector := &WuGongSelect{config: wgq.config}
	selector.fields = append([]string{field}, fields...)
	selector.sql = wgq.sqlQuery()
	return selector
}

func (wgq *WuGongQuery) sqlAll(ctx context.Context) ([]*WuGong, error) {
	var (
		nodes = []*WuGong{}
		_spec = wgq.querySpec()
	)
	_spec.ScanValues = func() []interface{} {
		node := &WuGong{config: wgq.config}
		nodes = append(nodes, node)
		values := node.scanValues()
		return values
	}
	_spec.Assign = func(values ...interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		return node.assignValues(values...)
	}
	if err := sqlgraph.QueryNodes(ctx, wgq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (wgq *WuGongQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wgq.querySpec()
	return sqlgraph.CountNodes(ctx, wgq.driver, _spec)
}

func (wgq *WuGongQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := wgq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (wgq *WuGongQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   wugong.Table,
			Columns: wugong.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wugong.FieldID,
			},
		},
		From:   wgq.sql,
		Unique: true,
	}
	if ps := wgq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wgq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wgq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wgq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wgq *WuGongQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(wgq.driver.Dialect())
	t1 := builder.Table(wugong.Table)
	selector := builder.Select(t1.Columns(wugong.Columns...)...).From(t1)
	if wgq.sql != nil {
		selector = wgq.sql
		selector.Select(selector.Columns(wugong.Columns...)...)
	}
	for _, p := range wgq.predicates {
		p(selector)
	}
	for _, p := range wgq.order {
		p(selector)
	}
	if offset := wgq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wgq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WuGongGroupBy is the builder for group-by WuGong entities.
type WuGongGroupBy struct {
	config
	fields []string
	fns    []Aggregate
	// intermediate query.
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wggb *WuGongGroupBy) Aggregate(fns ...Aggregate) *WuGongGroupBy {
	wggb.fns = append(wggb.fns, fns...)
	return wggb
}

// Scan applies the group-by query and scan the result into the given value.
func (wggb *WuGongGroupBy) Scan(ctx context.Context, v interface{}) error {
	return wggb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wggb *WuGongGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := wggb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by. It is only allowed when querying group-by with one field.
func (wggb *WuGongGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(wggb.fields) > 1 {
		return nil, errors.New("ent: WuGongGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := wggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wggb *WuGongGroupBy) StringsX(ctx context.Context) []string {
	v, err := wggb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by. It is only allowed when querying group-by with one field.
func (wggb *WuGongGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(wggb.fields) > 1 {
		return nil, errors.New("ent: WuGongGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := wggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wggb *WuGongGroupBy) IntsX(ctx context.Context) []int {
	v, err := wggb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by. It is only allowed when querying group-by with one field.
func (wggb *WuGongGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(wggb.fields) > 1 {
		return nil, errors.New("ent: WuGongGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := wggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wggb *WuGongGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := wggb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by. It is only allowed when querying group-by with one field.
func (wggb *WuGongGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(wggb.fields) > 1 {
		return nil, errors.New("ent: WuGongGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := wggb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wggb *WuGongGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := wggb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wggb *WuGongGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := wggb.sqlQuery().Query()
	if err := wggb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wggb *WuGongGroupBy) sqlQuery() *sql.Selector {
	selector := wggb.sql
	columns := make([]string, 0, len(wggb.fields)+len(wggb.fns))
	columns = append(columns, wggb.fields...)
	for _, fn := range wggb.fns {
		columns = append(columns, fn(selector))
	}
	return selector.Select(columns...).GroupBy(wggb.fields...)
}

// WuGongSelect is the builder for select fields of WuGong entities.
type WuGongSelect struct {
	config
	fields []string
	// intermediate queries.
	sql *sql.Selector
}

// Scan applies the selector query and scan the result into the given value.
func (wgs *WuGongSelect) Scan(ctx context.Context, v interface{}) error {
	return wgs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (wgs *WuGongSelect) ScanX(ctx context.Context, v interface{}) {
	if err := wgs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from selector. It is only allowed when selecting one field.
func (wgs *WuGongSelect) Strings(ctx context.Context) ([]string, error) {
	if len(wgs.fields) > 1 {
		return nil, errors.New("ent: WuGongSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := wgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (wgs *WuGongSelect) StringsX(ctx context.Context) []string {
	v, err := wgs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from selector. It is only allowed when selecting one field.
func (wgs *WuGongSelect) Ints(ctx context.Context) ([]int, error) {
	if len(wgs.fields) > 1 {
		return nil, errors.New("ent: WuGongSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := wgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (wgs *WuGongSelect) IntsX(ctx context.Context) []int {
	v, err := wgs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from selector. It is only allowed when selecting one field.
func (wgs *WuGongSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(wgs.fields) > 1 {
		return nil, errors.New("ent: WuGongSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := wgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (wgs *WuGongSelect) Float64sX(ctx context.Context) []float64 {
	v, err := wgs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from selector. It is only allowed when selecting one field.
func (wgs *WuGongSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(wgs.fields) > 1 {
		return nil, errors.New("ent: WuGongSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := wgs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (wgs *WuGongSelect) BoolsX(ctx context.Context) []bool {
	v, err := wgs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wgs *WuGongSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := wgs.sqlQuery().Query()
	if err := wgs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (wgs *WuGongSelect) sqlQuery() sql.Querier {
	selector := wgs.sql
	selector.Select(selector.Columns(wgs.fields...)...)
	return selector
}
