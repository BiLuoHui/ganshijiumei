// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/jianghuren"
	"github.com/BiLuoHui/ganshijiumei/ent/weapon"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// WeaponCreate is the builder for creating a Weapon entity.
type WeaponCreate struct {
	config
	mutation *WeaponMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (wc *WeaponCreate) SetCreatedAt(t time.Time) *WeaponCreate {
	wc.mutation.SetCreatedAt(t)
	return wc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (wc *WeaponCreate) SetNillableCreatedAt(t *time.Time) *WeaponCreate {
	if t != nil {
		wc.SetCreatedAt(*t)
	}
	return wc
}

// SetUpdatedAt sets the updated_at field.
func (wc *WeaponCreate) SetUpdatedAt(t time.Time) *WeaponCreate {
	wc.mutation.SetUpdatedAt(t)
	return wc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (wc *WeaponCreate) SetNillableUpdatedAt(t *time.Time) *WeaponCreate {
	if t != nil {
		wc.SetUpdatedAt(*t)
	}
	return wc
}

// SetName sets the name field.
func (wc *WeaponCreate) SetName(s string) *WeaponCreate {
	wc.mutation.SetName(s)
	return wc
}

// SetLevel sets the level field.
func (wc *WeaponCreate) SetLevel(i int) *WeaponCreate {
	wc.mutation.SetLevel(i)
	return wc
}

// SetNillableLevel sets the level field if the given value is not nil.
func (wc *WeaponCreate) SetNillableLevel(i *int) *WeaponCreate {
	if i != nil {
		wc.SetLevel(*i)
	}
	return wc
}

// SetCategory sets the category field.
func (wc *WeaponCreate) SetCategory(i int) *WeaponCreate {
	wc.mutation.SetCategory(i)
	return wc
}

// SetNillableCategory sets the category field if the given value is not nil.
func (wc *WeaponCreate) SetNillableCategory(i *int) *WeaponCreate {
	if i != nil {
		wc.SetCategory(*i)
	}
	return wc
}

// SetOwnerID sets the owner edge to JiangHuRen by id.
func (wc *WeaponCreate) SetOwnerID(id int) *WeaponCreate {
	wc.mutation.SetOwnerID(id)
	return wc
}

// SetOwner sets the owner edge to JiangHuRen.
func (wc *WeaponCreate) SetOwner(j *JiangHuRen) *WeaponCreate {
	return wc.SetOwnerID(j.ID)
}

// Save creates the Weapon in the database.
func (wc *WeaponCreate) Save(ctx context.Context) (*Weapon, error) {
	if _, ok := wc.mutation.CreatedAt(); !ok {
		v := weapon.DefaultCreatedAt()
		wc.mutation.SetCreatedAt(v)
	}
	if _, ok := wc.mutation.UpdatedAt(); !ok {
		v := weapon.DefaultUpdatedAt()
		wc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if _, ok := wc.mutation.Level(); !ok {
		v := weapon.DefaultLevel
		wc.mutation.SetLevel(v)
	}
	if _, ok := wc.mutation.Category(); !ok {
		v := weapon.DefaultCategory
		wc.mutation.SetCategory(v)
	}
	if _, ok := wc.mutation.OwnerID(); !ok {
		return nil, errors.New("ent: missing required edge \"owner\"")
	}
	var (
		err  error
		node *Weapon
	)
	if len(wc.hooks) == 0 {
		node, err = wc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WeaponMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wc.mutation = mutation
			node, err = wc.sqlSave(ctx)
			return node, err
		})
		for i := len(wc.hooks) - 1; i >= 0; i-- {
			mut = wc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wc *WeaponCreate) SaveX(ctx context.Context) *Weapon {
	v, err := wc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wc *WeaponCreate) sqlSave(ctx context.Context) (*Weapon, error) {
	var (
		w     = &Weapon{config: wc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: weapon.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: weapon.FieldID,
			},
		}
	)
	if value, ok := wc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weapon.FieldCreatedAt,
		})
		w.CreatedAt = value
	}
	if value, ok := wc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: weapon.FieldUpdatedAt,
		})
		w.UpdatedAt = value
	}
	if value, ok := wc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: weapon.FieldName,
		})
		w.Name = value
	}
	if value, ok := wc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldLevel,
		})
		w.Level = value
	}
	if value, ok := wc.mutation.Category(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: weapon.FieldCategory,
		})
		w.Category = value
	}
	if nodes := wc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   weapon.OwnerTable,
			Columns: []string{weapon.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: jianghuren.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if err := sqlgraph.CreateNode(ctx, wc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	w.ID = int(id)
	return w, nil
}
