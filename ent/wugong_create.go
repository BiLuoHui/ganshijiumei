// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/wugong"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// WuGongCreate is the builder for creating a WuGong entity.
type WuGongCreate struct {
	config
	mutation *WuGongMutation
	hooks    []Hook
}

// SetCreatedAt sets the created_at field.
func (wgc *WuGongCreate) SetCreatedAt(t time.Time) *WuGongCreate {
	wgc.mutation.SetCreatedAt(t)
	return wgc
}

// SetNillableCreatedAt sets the created_at field if the given value is not nil.
func (wgc *WuGongCreate) SetNillableCreatedAt(t *time.Time) *WuGongCreate {
	if t != nil {
		wgc.SetCreatedAt(*t)
	}
	return wgc
}

// SetUpdatedAt sets the updated_at field.
func (wgc *WuGongCreate) SetUpdatedAt(t time.Time) *WuGongCreate {
	wgc.mutation.SetUpdatedAt(t)
	return wgc
}

// SetNillableUpdatedAt sets the updated_at field if the given value is not nil.
func (wgc *WuGongCreate) SetNillableUpdatedAt(t *time.Time) *WuGongCreate {
	if t != nil {
		wgc.SetUpdatedAt(*t)
	}
	return wgc
}

// SetName sets the name field.
func (wgc *WuGongCreate) SetName(s string) *WuGongCreate {
	wgc.mutation.SetName(s)
	return wgc
}

// SetDamage sets the damage field.
func (wgc *WuGongCreate) SetDamage(i int) *WuGongCreate {
	wgc.mutation.SetDamage(i)
	return wgc
}

// SetNillableDamage sets the damage field if the given value is not nil.
func (wgc *WuGongCreate) SetNillableDamage(i *int) *WuGongCreate {
	if i != nil {
		wgc.SetDamage(*i)
	}
	return wgc
}

// SetLevel sets the level field.
func (wgc *WuGongCreate) SetLevel(u uint8) *WuGongCreate {
	wgc.mutation.SetLevel(u)
	return wgc
}

// Save creates the WuGong in the database.
func (wgc *WuGongCreate) Save(ctx context.Context) (*WuGong, error) {
	if _, ok := wgc.mutation.CreatedAt(); !ok {
		v := wugong.DefaultCreatedAt()
		wgc.mutation.SetCreatedAt(v)
	}
	if _, ok := wgc.mutation.UpdatedAt(); !ok {
		v := wugong.DefaultUpdatedAt()
		wgc.mutation.SetUpdatedAt(v)
	}
	if _, ok := wgc.mutation.Name(); !ok {
		return nil, errors.New("ent: missing required field \"name\"")
	}
	if _, ok := wgc.mutation.Damage(); !ok {
		v := wugong.DefaultDamage
		wgc.mutation.SetDamage(v)
	}
	if _, ok := wgc.mutation.Level(); !ok {
		return nil, errors.New("ent: missing required field \"level\"")
	}
	if v, ok := wgc.mutation.Level(); ok {
		if err := wugong.LevelValidator(v); err != nil {
			return nil, fmt.Errorf("ent: validator failed for field \"level\": %v", err)
		}
	}
	var (
		err  error
		node *WuGong
	)
	if len(wgc.hooks) == 0 {
		node, err = wgc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*WuGongMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			wgc.mutation = mutation
			node, err = wgc.sqlSave(ctx)
			return node, err
		})
		for i := len(wgc.hooks) - 1; i >= 0; i-- {
			mut = wgc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, wgc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (wgc *WuGongCreate) SaveX(ctx context.Context) *WuGong {
	v, err := wgc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (wgc *WuGongCreate) sqlSave(ctx context.Context) (*WuGong, error) {
	var (
		wg    = &WuGong{config: wgc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: wugong.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: wugong.FieldID,
			},
		}
	)
	if value, ok := wgc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wugong.FieldCreatedAt,
		})
		wg.CreatedAt = value
	}
	if value, ok := wgc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: wugong.FieldUpdatedAt,
		})
		wg.UpdatedAt = value
	}
	if value, ok := wgc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: wugong.FieldName,
		})
		wg.Name = value
	}
	if value, ok := wgc.mutation.Damage(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: wugong.FieldDamage,
		})
		wg.Damage = value
	}
	if value, ok := wgc.mutation.Level(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint8,
			Value:  value,
			Column: wugong.FieldLevel,
		})
		wg.Level = value
	}
	if err := sqlgraph.CreateNode(ctx, wgc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	wg.ID = int(id)
	return wg, nil
}
