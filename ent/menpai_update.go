// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"time"

	"github.com/BiLuoHui/ganshijiumei/ent/menpai"
	"github.com/BiLuoHui/ganshijiumei/ent/predicate"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/facebookincubator/ent/schema/field"
)

// MenPaiUpdate is the builder for updating MenPai entities.
type MenPaiUpdate struct {
	config
	hooks      []Hook
	mutation   *MenPaiMutation
	predicates []predicate.MenPai
}

// Where adds a new predicate for the builder.
func (mpu *MenPaiUpdate) Where(ps ...predicate.MenPai) *MenPaiUpdate {
	mpu.predicates = append(mpu.predicates, ps...)
	return mpu
}

// SetUpdatedAt sets the updated_at field.
func (mpu *MenPaiUpdate) SetUpdatedAt(t time.Time) *MenPaiUpdate {
	mpu.mutation.SetUpdatedAt(t)
	return mpu
}

// SetName sets the name field.
func (mpu *MenPaiUpdate) SetName(s string) *MenPaiUpdate {
	mpu.mutation.SetName(s)
	return mpu
}

// SetAddress sets the address field.
func (mpu *MenPaiUpdate) SetAddress(s string) *MenPaiUpdate {
	mpu.mutation.SetAddress(s)
	return mpu
}

// SetNillableAddress sets the address field if the given value is not nil.
func (mpu *MenPaiUpdate) SetNillableAddress(s *string) *MenPaiUpdate {
	if s != nil {
		mpu.SetAddress(*s)
	}
	return mpu
}

// Save executes the query and returns the number of rows/vertices matched by this operation.
func (mpu *MenPaiUpdate) Save(ctx context.Context) (int, error) {
	if _, ok := mpu.mutation.UpdatedAt(); !ok {
		v := menpai.UpdateDefaultUpdatedAt()
		mpu.mutation.SetUpdatedAt(v)
	}
	var (
		err      error
		affected int
	)
	if len(mpu.hooks) == 0 {
		affected, err = mpu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenPaiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpu.mutation = mutation
			affected, err = mpu.sqlSave(ctx)
			return affected, err
		})
		for i := len(mpu.hooks) - 1; i >= 0; i-- {
			mut = mpu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpu *MenPaiUpdate) SaveX(ctx context.Context) int {
	affected, err := mpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mpu *MenPaiUpdate) Exec(ctx context.Context) error {
	_, err := mpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpu *MenPaiUpdate) ExecX(ctx context.Context) {
	if err := mpu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mpu *MenPaiUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menpai.Table,
			Columns: menpai.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menpai.FieldID,
			},
		},
	}
	if ps := mpu.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mpu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menpai.FieldUpdatedAt,
		})
	}
	if value, ok := mpu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menpai.FieldName,
		})
	}
	if value, ok := mpu.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menpai.FieldAddress,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menpai.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// MenPaiUpdateOne is the builder for updating a single MenPai entity.
type MenPaiUpdateOne struct {
	config
	hooks    []Hook
	mutation *MenPaiMutation
}

// SetUpdatedAt sets the updated_at field.
func (mpuo *MenPaiUpdateOne) SetUpdatedAt(t time.Time) *MenPaiUpdateOne {
	mpuo.mutation.SetUpdatedAt(t)
	return mpuo
}

// SetName sets the name field.
func (mpuo *MenPaiUpdateOne) SetName(s string) *MenPaiUpdateOne {
	mpuo.mutation.SetName(s)
	return mpuo
}

// SetAddress sets the address field.
func (mpuo *MenPaiUpdateOne) SetAddress(s string) *MenPaiUpdateOne {
	mpuo.mutation.SetAddress(s)
	return mpuo
}

// SetNillableAddress sets the address field if the given value is not nil.
func (mpuo *MenPaiUpdateOne) SetNillableAddress(s *string) *MenPaiUpdateOne {
	if s != nil {
		mpuo.SetAddress(*s)
	}
	return mpuo
}

// Save executes the query and returns the updated entity.
func (mpuo *MenPaiUpdateOne) Save(ctx context.Context) (*MenPai, error) {
	if _, ok := mpuo.mutation.UpdatedAt(); !ok {
		v := menpai.UpdateDefaultUpdatedAt()
		mpuo.mutation.SetUpdatedAt(v)
	}
	var (
		err  error
		node *MenPai
	)
	if len(mpuo.hooks) == 0 {
		node, err = mpuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*MenPaiMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			mpuo.mutation = mutation
			node, err = mpuo.sqlSave(ctx)
			return node, err
		})
		for i := len(mpuo.hooks) - 1; i >= 0; i-- {
			mut = mpuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, mpuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (mpuo *MenPaiUpdateOne) SaveX(ctx context.Context) *MenPai {
	mp, err := mpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return mp
}

// Exec executes the query on the entity.
func (mpuo *MenPaiUpdateOne) Exec(ctx context.Context) error {
	_, err := mpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mpuo *MenPaiUpdateOne) ExecX(ctx context.Context) {
	if err := mpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mpuo *MenPaiUpdateOne) sqlSave(ctx context.Context) (mp *MenPai, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   menpai.Table,
			Columns: menpai.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: menpai.FieldID,
			},
		},
	}
	id, ok := mpuo.mutation.ID()
	if !ok {
		return nil, fmt.Errorf("missing MenPai.ID for update")
	}
	_spec.Node.ID.Value = id
	if value, ok := mpuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: menpai.FieldUpdatedAt,
		})
	}
	if value, ok := mpuo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menpai.FieldName,
		})
	}
	if value, ok := mpuo.mutation.Address(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: menpai.FieldAddress,
		})
	}
	mp = &MenPai{config: mpuo.config}
	_spec.Assign = mp.assignValues
	_spec.ScanValues = mp.scanValues()
	if err = sqlgraph.UpdateNode(ctx, mpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{menpai.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return mp, nil
}
